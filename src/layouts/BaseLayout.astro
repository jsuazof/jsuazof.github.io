---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import SideBar from "../components/SideBar.astro";
import { ViewTransitions } from "astro:transitions";

import { SITE_TITLE, SITE_DESCRIPTION, TRANSITION_API } from "../config";

const {
  image,
  title = SITE_TITLE,
  description = SITE_DESCRIPTION,
  includeSidebar = true,
  sideBarActiveItemID,
  ogType,
} = Astro.props;
---

<!doctype html>
<html lang="en" data-theme="dark">
  <head>
    <BaseHead title={title} description={description} image={image} , ogType={ogType} />
    {TRANSITION_API && <ViewTransitions />}
    <script is:inline>
      (function() {
        const theme = localStorage.getItem('theme') || 'dark';
        document.documentElement.setAttribute('data-theme', theme);
      })();
    </script>
  </head>
  <body>
    <div class="drawer lg:drawer-open">
      <input id="my-drawer" type="checkbox" class="drawer-toggle" />
      <div class="drawer-content">
        <Header title={SITE_TITLE} />
        <div class="md:flex md:justify-center">
          <main class="p-4 sm:p-6 pt-10 w-full lg:max-w-[900px] max-w-none">
            <slot />
          </main>
        </div>
        <Footer />
      </div>
      {includeSidebar && (
        <div class="drawer-side">
          <label for="my-drawer" aria-label="close sidebar" class="drawer-overlay"></label>
          <SideBar sideBarActiveItemID={sideBarActiveItemID} />
        </div>
      )}
    </div>
    
    <script is:inline>
      window.themeManager = {
        init() {
          const theme = localStorage.getItem('theme') || 'dark';
          document.documentElement.setAttribute('data-theme', theme);
          this.updateIcons(theme);
        },
        
        updateIcons(theme) {
          const isDark = theme === 'dark';
          
          ['', '-sidebar'].forEach(suffix => {
            const darkIcon = document.getElementById(`theme-toggle-dark-icon${suffix}`);
            const lightIcon = document.getElementById(`theme-toggle-light-icon${suffix}`);
            
            if (darkIcon && lightIcon) {
              if (isDark) {
                darkIcon.classList.add('hidden');
                lightIcon.classList.remove('hidden');
              } else {
                darkIcon.classList.remove('hidden');
                lightIcon.classList.add('hidden');
              }
            }
          });
        },
        
        toggle() {
          const current = document.documentElement.getAttribute('data-theme');
          const newTheme = current === 'dark' ? 'light' : 'dark';
          
          document.documentElement.setAttribute('data-theme', newTheme);
          localStorage.setItem('theme', newTheme);
          this.updateIcons(newTheme);
        },
        
        bindEvents() {
          ['theme-toggle', 'theme-toggle-sidebar'].forEach(id => {
            const btn = document.getElementById(id);
            if (btn) {
              btn.removeEventListener('click', this.toggle);
              btn.addEventListener('click', () => this.toggle());
            }
          });
        }
      };
      
      function initPage() {
        window.themeManager.init();
        window.themeManager.bindEvents();
      }
      
      document.addEventListener('DOMContentLoaded', initPage);
      document.addEventListener('astro:page-load', initPage);
    </script>
  </body>
</html>
