---
import { Image } from "astro:assets";
const { certificates, title, color = "blue" } = Astro.props;
---

<div class="mb-12">
  <h2 class={`text-2xl font-bold mb-6 text-${color}-600 dark:text-${color}-400`}>{title}</h2>
  <div class="certificate-slider relative overflow-hidden">
    <div class="slider-container flex transition-transform duration-500 ease-in-out">
      {certificates.map((cert, index) => (
        <div class="certificate-card flex-shrink-0 w-80 mx-3 group">
          <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 border border-gray-200 dark:border-gray-700 overflow-hidden cursor-pointer" onclick="window.open('${cert.url}', '_blank')">
            <div class="aspect-[4/3] relative overflow-hidden bg-gray-100 dark:bg-gray-800 group-hover:shadow-inner transition-all duration-300">
              <!-- Certificate Image Preview -->
              {cert.image ? (
                <Image
                  src={cert.image}
                  alt={`Preview of ${cert.title}`}
                  class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                  width={400}
                  height={300}
                  format="webp"
                  loading="lazy"
                />
              ) : (
                <!-- Fallback for certificates without images -->
                <div class={`w-full h-full bg-gradient-to-br from-${color}-50 to-${color}-100 dark:from-${color}-900/30 dark:to-${color}-800/30 flex flex-col items-center justify-center`}>
                  <div class={`w-16 h-16 bg-${color}-500 rounded-full flex items-center justify-center mb-3 group-hover:scale-110 transition-transform duration-300 shadow-lg`}>
                    <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h8a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 0v12h8V4H6z" clip-rule="evenodd"/>
                      <path d="M8 6h4v2H8V6zM8 10h4v2H8v-2z"/>
                    </svg>
                  </div>
                  <div class={`text-${color}-600 dark:text-${color}-400 font-bold text-sm tracking-wider`}>
                    {cert.provider}
                  </div>
                </div>
              )}
              
              <!-- Overlay for better interaction -->
              <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
              
              <!-- PDF Badge -->
              <div class="absolute top-2 right-2 bg-red-500 text-white text-xs px-2 py-1 rounded-full font-medium shadow-md z-10">PDF</div>
              
              <!-- Provider Badge -->
              <div class={`absolute top-2 left-2 bg-${color}-500 text-white text-xs px-2 py-1 rounded-full font-medium shadow-md z-10`}>
                {cert.provider}
              </div>
              
              <!-- Click hint -->
              <div class="absolute bottom-2 right-2 bg-black/70 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10">
                Click para ver PDF
              </div>
            </div>
            <div class="p-4">
              <h3 class="font-semibold text-gray-900 dark:text-gray-100 mb-2 line-clamp-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                {cert.title}
              </h3>
              <p class="text-sm text-gray-600 dark:text-gray-400 mb-3 line-clamp-2">{cert.description}</p>
              <div class="flex items-center justify-between">
                <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${color}-100 text-${color}-800 dark:bg-${color}-900 dark:text-${color}-200`}>
                  {cert.provider}
                </span>
                <a 
                  href={cert.url} 
                  target="_blank"
                  onclick="event.stopPropagation()"
                  class="inline-flex items-center text-sm font-medium text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 transition-colors group"
                >
                  Ver PDF
                  <svg class="w-4 h-4 ml-1 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
                  </svg>
                </a>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <!-- Navigation buttons -->
    <button class="slider-btn slider-prev absolute left-2 top-1/2 -translate-y-1/2 bg-white dark:bg-gray-800 shadow-lg rounded-full p-3 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 z-10 opacity-0 group-hover:opacity-100">
      <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
      </svg>
    </button>
    <button class="slider-btn slider-next absolute right-2 top-1/2 -translate-y-1/2 bg-white dark:bg-gray-800 shadow-lg rounded-full p-3 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 z-10 opacity-0 group-hover:opacity-100">
      <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
      </svg>
    </button>
    
    <!-- Dots indicator -->
    <div class="flex justify-center mt-6 space-x-2">
      {certificates.map((_, index) => (
        <button class={`slider-dot w-2 h-2 rounded-full transition-all duration-200 ${index === 0 ? `bg-${color}-500` : 'bg-gray-300 dark:bg-gray-600'}`} data-index={index}></button>
      ))}
    </div>
  </div>
</div>



<script>
document.addEventListener('DOMContentLoaded', function() {
  const sliders = document.querySelectorAll('.certificate-slider');
  
  sliders.forEach(slider => {
    const container = slider.querySelector('.slider-container');
    const cards = slider.querySelectorAll('.certificate-card');
    const prevBtn = slider.querySelector('.slider-prev');
    const nextBtn = slider.querySelector('.slider-next');
    const dots = slider.querySelectorAll('.slider-dot');
    
    let currentIndex = 0;
    const cardWidth = 320; // 80 * 4 (w-80 + margin)
    const visibleCards = Math.floor(slider.offsetWidth / cardWidth);
    const maxIndex = Math.max(0, cards.length - visibleCards);
    
    function updateSlider() {
      const translateX = -currentIndex * cardWidth;
      container.style.transform = `translateX(${translateX}px)`;
      
      // Update dots
      dots.forEach((dot, index) => {
        dot.classList.toggle('bg-blue-500', index === currentIndex);
        dot.classList.toggle('bg-gray-300', index !== currentIndex);
        dot.classList.toggle('dark:bg-gray-600', index !== currentIndex);
      });
      
      // Update button visibility
      prevBtn.style.opacity = currentIndex > 0 ? '1' : '0.5';
      nextBtn.style.opacity = currentIndex < maxIndex ? '1' : '0.5';
    }
    
    prevBtn.addEventListener('click', () => {
      if (currentIndex > 0) {
        currentIndex--;
        updateSlider();
      }
    });
    
    nextBtn.addEventListener('click', () => {
      if (currentIndex < maxIndex) {
        currentIndex++;
        updateSlider();
      }
    });
    
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        currentIndex = Math.min(index, maxIndex);
        updateSlider();
      });
    });
    
    // Show navigation on hover
    slider.addEventListener('mouseenter', () => {
      prevBtn.style.opacity = currentIndex > 0 ? '1' : '0.5';
      nextBtn.style.opacity = currentIndex < maxIndex ? '1' : '0.5';
    });
    
    slider.addEventListener('mouseleave', () => {
      prevBtn.style.opacity = '0';
      nextBtn.style.opacity = '0';
    });
    
    // Auto-scroll
    let autoScrollInterval = setInterval(() => {
      if (currentIndex < maxIndex) {
        currentIndex++;
      } else {
        currentIndex = 0;
      }
      updateSlider();
    }, 5000);
    
    // Pause auto-scroll on hover
    slider.addEventListener('mouseenter', () => clearInterval(autoScrollInterval));
    slider.addEventListener('mouseleave', () => {
      autoScrollInterval = setInterval(() => {
        if (currentIndex < maxIndex) {
          currentIndex++;
        } else {
          currentIndex = 0;
        }
        updateSlider();
      }, 5000);
    });
    
    updateSlider();
  });
});


</script>

<style>
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.certificate-slider:hover .slider-btn {
  opacity: 1;
}
</style>